// üìÅ chinh.js - DUAL MODE SUPPORT (Safe Migration)
// Version: 3.0 - Backward Compatible + Event Delegation

// ‚úÖ Load c·∫•u h√¨nh tr∆∞·ªõc
import './cauhinh.js';

console.log("üü¢ chinh.js ƒë√£ ƒë∆∞·ª£c load!");

// ‚úÖ Import c√°c modules theo th·ª© t·ª± ƒë√∫ng
import {
  // Event delegation system only
  initEventDelegation, cleanupEventDelegation
} from './xulycot.js';

import { loadKhachHangList, goiykh } from './danhsachkhachhang.js';
import { themDongMoi, xoaDong } from './bangexcel.js';
import { ShowLog } from './showlog.js';
import { ngayTru1, idchuyen, duCacheLog, duCacheForm } from './cache.js';
import { chiaChuyenTheoQuyTac } from './chiachuyen.js';
import * as fixloi from './fixloi.js';

// üîß FEATURE CONFIGURATION
const SYSTEM_CONFIG = {
  USE_EVENT_DELEGATION: true,  // Enable new system
  FALLBACK_TO_OLD: false,      // Disable legacy fallback
  DEBUG_MODE: true             // Enhanced logging
};

console.log("üîç System Config:", SYSTEM_CONFIG);

// ‚úÖ Kh·ªüi ƒë·ªông h·ªá th·ªëng khi DOM s·∫µn s√†ng
window.addEventListener('DOMContentLoaded', async () => {
  console.log("‚úÖ DOM s·∫µn s√†ng, b·∫Øt ƒë·∫ßu kh·ªüi t·∫°o h·ªá th·ªëng‚Ä¶");

  try {
    // üîß Event Delegation Mode Only
    console.log("üöÄ Initializing Event Delegation Mode‚Ä¶");

    try {
      // Initialize new event delegation system
      initEventDelegation();
      window._eventDelegationActive = true;
      console.log("‚úÖ Event Delegation activated");
      
      // Store cleanup function for later use
      window._cleanupEventDelegation = cleanupEventDelegation;
      
    } catch (err) {
      console.error("‚ùå Event Delegation failed:", err);
      throw err; // Don't fallback, just throw error
    }

    // ‚úÖ Load customer list
    await loadKhachHangList();

    // ‚úÖ Initialize main system
    await fixloi.khoiDongHeThong();

    console.log("üü¢ H·ªá th·ªëng ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!");

    // ‚úÖ Verify system status
    verifySystemStatus();

  } catch (err) {
    console.error("‚ùå L·ªói khi kh·ªüi ƒë·ªông h·ªá th·ªëng:", err);
    alert("‚ö†Ô∏è C√≥ l·ªói khi kh·ªüi ƒë·ªông h·ªá th·ªëng. Vui l√≤ng refresh trang!");
  }
});

// ‚úÖ ENHANCED WINDOW FUNCTIONS v·ªõi event delegation support
function setupWindowFunctions() {
  // üîµ ADD NEW ROW - Event delegation compatible
  window.addNewRow = function() {
    try {
      if (typeof window.themDongMoi === 'function') {
        const newInputs = window.themDongMoi();

        if (Array.isArray(newInputs) && newInputs.length > 0) {
          // Event delegation automatically handles new inputs
          console.log("üì° Event delegation will handle new inputs automatically");
          
          // Focus v√†o c·ªôt ƒë·∫ßu ti√™n
          setTimeout(() => {
            newInputs[0].focus();
          }, 10);
          
          console.log(`‚úÖ ƒê√£ th√™m d√≤ng m·ªõi v·ªõi ${newInputs.length} input`);
          return newInputs;
        }
      } else {
        console.error("‚ùå themDongMoi function ch∆∞a s·∫µn s√†ng");
      }
    } catch (err) {
      console.error("‚ùå L·ªói addNewRow:", err);
      alert("‚ö†Ô∏è C√≥ l·ªói khi th√™m d√≤ng m·ªõi!");
    }
    return null;
  };

  // üî¥ DELETE ROW - Compatible with both modes
  window.deleteRow = function(button) {
    try {
      if (typeof window.xoaDong === 'function') {
        window.xoaDong(button);
      } else {
        console.error("‚ùå xoaDong function ch∆∞a s·∫µn s√†ng");
      }
    } catch (err) {
      console.error("‚ùå L·ªói deleteRow:", err);
      alert("‚ö†Ô∏è C√≥ l·ªói khi x√≥a d√≤ng!");
    }
  };

  // ‚öôÔ∏è SPLIT ROW - Enhanced for dual mode
  window.splitRow = function(button) {
    try {
      console.log("‚öôÔ∏è B·∫Øt ƒë·∫ßu chia chuy·∫øn‚Ä¶");

      // Call enhanced split logic from fixloi.js
      if (typeof fixloi.enhancedSplitRow === 'function') {
        fixloi.enhancedSplitRow(button);
      } else {
        // Fallback to basic split logic
        console.log("‚ö†Ô∏è Enhanced split row not available, using basic logic");
        
        // Get row data
        const actionCell = button.closest('.excel-cell') || button.closest('.action-cell');
        if (!actionCell) {
          throw new Error("Kh√¥ng t√¨m th·∫•y action cell");
        }

        const gridElement = document.querySelector('.excel-grid');
        if (!gridElement) {
          throw new Error("Kh√¥ng t√¨m th·∫•y excel grid");
        }

        const allCells = Array.from(gridElement.children);
        const actionIndex = allCells.indexOf(actionCell);
        const rowStartIndex = Math.floor(actionIndex / 7) * 7;
        const rowCells = allCells.slice(rowStartIndex, rowStartIndex + 6);
        const inputs = rowCells.map(cell => cell.querySelector('input')).filter(Boolean);
        
        if (inputs.length < 6) {
          throw new Error("D√≤ng kh√¥ng ƒë·∫ßy ƒë·ªß input fields");
        }

        const rowData = {
          idChuyen: inputs[0].value.trim(),
          ngay: inputs[1].value.trim(),
          khachHang: inputs[2].value.trim(),
          soLuong: inputs[3].value.trim(),
          ca: inputs[4].value.trim(),
          taiXe: inputs[5].value.trim()
        };

        if (!rowData.khachHang || !rowData.soLuong) {
          alert("‚ö†Ô∏è C·∫ßn c√≥ √≠t nh·∫•t th√¥ng tin Kh√°ch h√†ng v√† S·ªë l∆∞·ª£ng ƒë·ªÉ chia chuy·∫øn!");
          return;
        }

        // Use split function from chiachuyen.js
        if (typeof chiaChuyenTheoQuyTac === 'function') {
          const ketQua = chiaChuyenTheoQuyTac(rowData);
          
          if (ketQua && ketQua.length > 1) {
            // Delete current row
            window.deleteRow(button);
            
            // Add new rows
            ketQua.forEach(dongMoi => {
              const newInputs = window.addNewRow();
              if (newInputs && newInputs.length >= 6) {
                newInputs[0].value = dongMoi.idChuyen || '';
                newInputs[1].value = dongMoi.ngay || '';
                newInputs[2].value = dongMoi.khachHang || '';
                newInputs[3].value = dongMoi.soLuong || '';
                newInputs[4].value = dongMoi.ca || '';
                newInputs[5].value = dongMoi.taiXe || '';
              }
            });
            
            alert(`‚úÖ ƒê√£ chia th√†nh ${ketQua.length} chuy·∫øn!`);
          } else {
            alert("‚ÑπÔ∏è D√≤ng n√†y kh√¥ng c·∫ßn chia ho·∫∑c kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán chia!");
          }
        } else {
          alert("‚öôÔ∏è T√≠nh nƒÉng chia chuy·∫øn ch∆∞a s·∫µn s√†ng‚Ä¶");
        }
      }
      
    } catch (err) {
      console.error("‚ùå L·ªói splitRow:", err);
      alert("‚ö†Ô∏è C√≥ l·ªói khi chia chuy·∫øn!");
    }
  };

  // üìä SYSTEM MODE TOGGLE (Debug function) - Simplified
  window.toggleSystemMode = function() {
    console.log("‚ÑπÔ∏è System is using Event Delegation only - no toggle available");
    console.log("Current status:", window._eventDelegationActive ? "Active" : "Inactive");
  };

  console.log("‚úÖ Window functions setup completed");
}

// ‚úÖ SYSTEM STATUS VERIFICATION - Simplified
function verifySystemStatus() {
  const status = {
    eventDelegation: window._eventDelegationActive || false,
    functions: {
      addNewRow: typeof window.addNewRow === 'function',
      deleteRow: typeof window.deleteRow === 'function',
      splitRow: typeof window.splitRow === 'function'
    },
    modules: {
      formConfig: !!window.formConfig,
      zacache: !!window.zacache,
      idchuyen: typeof window.idchuyen === 'function',
      ShowLog: typeof window.ShowLog === 'function'
    }
  };

  console.log("üìä System Status:", status);

  if (!status.eventDelegation) {
    console.error("‚ùå Event delegation not active!");
  }

  // Store status globally for debugging
  window._systemStatus = status;

  return status;
}

// üîß EMERGENCY RECOVERY FUNCTION - Simplified
window.emergencyRecovery = function() {
  console.log("üÜò Emergency recovery initiated‚Ä¶");

  try {
    // Cleanup and reinitialize event delegation
    if (window._cleanupEventDelegation) {
      window._cleanupEventDelegation();
    }

    // Reinitialize event delegation
    initEventDelegation();
    window._eventDelegationActive = true;

    console.log("‚úÖ Emergency recovery completed");
    alert("üÜò H·ªá th·ªëng ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c v·ªõi Event Delegation");

  } catch (err) {
    console.error("‚ùå Emergency recovery failed:", err);
    alert("‚ùå Kh√¥i ph·ª•c th·∫•t b·∫°i. Vui l√≤ng refresh trang!");
  }
};

// Initialize window functions immediately
setupWindowFunctions();

// Export for debugging
window.SYSTEM_CONFIG = SYSTEM_CONFIG;
window.verifySystemStatus = verifySystemStatus;