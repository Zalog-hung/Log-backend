// üìÅ cache.js - COMPLETE (All Cache Functions)

// ‚úÖ T√≠nh ng√†y tr·ª´ ƒëi 1 ng√†y
export function ngayTru1(ngay) {
  try {
    if (!ngay || typeof ngay !== 'string') {
      console.warn("‚ö†Ô∏è ngayTru1: Ng√†y kh√¥ng h·ª£p l·ªá:", ngay);
      return '';
    }

    // Validate format dd/mm/yyyy
    if (!/^\d{2}\/\d{2}\/\d{4}$/.test(ngay)) {
      console.warn("‚ö†Ô∏è ngayTru1: Format ng√†y kh√¥ng ƒë√∫ng (c·∫ßn dd/mm/yyyy):", ngay);
      return ngay; // Return original n·∫øu format sai
    }

    const [d, m, y] = ngay.split('/').map(Number);

    // Validate values
    if (d < 1 || d > 31 || m < 1 || m > 12 || y < 1900 || y > 2100) {
      console.warn("‚ö†Ô∏è ngayTru1: Gi√° tr·ªã ng√†y kh√¥ng h·ª£p l·ªá:", { d, m, y });
      return ngay;
    }

    const date = new Date(y, m - 1, d);
    date.setDate(date.getDate() - 1);

    const result = `${String(date.getDate()).padStart(2, '0')}/${String(date.getMonth() + 1).padStart(2, '0')}/${date.getFullYear()}`;

    console.log(`üìÖ ${ngay} tr·ª´ 1 ng√†y = ${result}`);
    return result;

  } catch (error) {
    console.error("‚ùå L·ªói trong ngayTru1:", error);
    return ngay; // Return original n·∫øu c√≥ l·ªói
  }
}

// ‚úÖ Sinh ID chuy·∫øn theo format dd.mm.xxx
export function idchuyen(ngay) {
  try {
    // Validate input
    if (!ngay || typeof ngay !== 'string' || !/^\d{2}\/\d{2}\/\d{4}$/.test(ngay)) {
      console.warn("‚ö†Ô∏è idchuyen: Ng√†y kh√¥ng h·ª£p l·ªá:", ngay);
      return () => `ERROR.${Date.now().toString().slice(-3)}`;
    }

    const [dd, mm] = ngay.split('/');
    const prefix = `${dd}.${mm}`;
    let counter = 0;

    console.log(`üî¢ T·∫°o ID chuy·∫øn cho ng√†y ${ngay}, prefix: ${prefix}`);

    // ‚úÖ Ki·ªÉm tra trong cache log
    const zacache = window.zacache;
    const rows = Array.isArray(zacache?.cacherlog) ? zacache.cacherlog : [];

    for (let i = 1; i < rows.length; i++) {
      const trip = String(rows[i]?.[0] ?? '').trim();
      const ngayRow = String(rows[i]?.[1] ?? '').trim();
      
      if (ngayRow === ngay && trip.startsWith(prefix)) {
        const parts = trip.split('.');
        if (parts.length === 3) {
          const so = parseInt(parts[2]);
          if (!isNaN(so)) {
            counter = Math.max(counter, so);
          }
        }
      }
    }

    // ‚úÖ Ki·ªÉm tra trong form hi·ªán t·∫°i
    const tripInputs = document.querySelectorAll('input[data-col="0"]');
    const dateInputs = document.querySelectorAll('input[data-col="1"]');

    for (let i = 0; i < tripInputs.length; i++) {
      const trip = tripInputs[i]?.value?.trim() ?? '';
      const date = dateInputs[i]?.value?.trim() ?? '';
      
      if (date === ngay && trip.startsWith(prefix)) {
        const parts = trip.split('.');
        if (parts.length === 3) {
          const so = parseInt(parts[2]);
          if (!isNaN(so)) {
            counter = Math.max(counter, so);
          }
        }
      }
    }

    console.log(`üìä Counter hi·ªán t·∫°i cho ${prefix}: ${counter}`);

    // ‚úÖ Return function ƒë·ªÉ t·∫°o ID ti·∫øp theo
    return function nextTripId() {
      counter++;
      const tripId = `${prefix}.${String(counter).padStart(3, '0')}`;
      console.log(`üÜî T·∫°o trip ID m·ªõi: ${tripId}`);
      return tripId;
    };

  } catch (error) {
    console.error("‚ùå L·ªói trong idchuyen:", error);
    return () => `ERROR.${Date.now().toString().slice(-3)}`;
  }
}

// ‚úÖ L·∫•y cache s·ªë d∆∞ t·ª´ log
export function duCacheLog(ngayNhap, maxPerTrip) {
  try {
    console.log(`üì¶ T√¨m cache log cho ng√†y: ${ngayNhap}, maxPerTrip: ${maxPerTrip}`);

    const ducache = {};

    if (!ngayNhap || typeof maxPerTrip !== 'number' || maxPerTrip <= 0) {
      console.warn("‚ö†Ô∏è duCacheLog: Tham s·ªë kh√¥ng h·ª£p l·ªá");
      return ducache;
    }

    const ngayHomQua = ngayTru1(ngayNhap);
    const zacache = window.zacache;

    if (!Array.isArray(zacache?.cacherlog)) {
      console.log("üìù Kh√¥ng c√≥ cache log, tr·∫£ v·ªÅ r·ªóng");
      return ducache;
    }

    let foundCount = 0;

    for (let i = 1; i < zacache.cacherlog.length; i++) {
      const row = zacache.cacherlog[i];
      if (!Array.isArray(row)) continue;

      const kh = String(row[2] || '').trim();
      const ngay = String(row[1] || '').trim();
      const ca = String(row[4] || '').trim();
      const slRaw = String(row[3] || '').trim();

      // Skip invalid data
      if (!kh || !slRaw || /t$/i.test(slRaw)) continue;
      if (![ngayNhap, ngayHomQua].includes(ngay)) continue;

      const sl = parseFloat(slRaw);
      if (isNaN(sl) || sl <= 0 || sl >= maxPerTrip) continue;

      // ‚úÖ Ch·ªâ gi·ªØ l·∫°i d√≤ng ƒë·∫ßu ti√™n h·ª£p l·ªá c·ªßa m·ªói KH
      if (!ducache[kh]) {
        ducache[kh] = {
          from: 'log',
          total: sl,
          ngay,
          ca,
          approved: false,
          rowIndex: i
        };
        foundCount++;
        console.log(`üìã Cache log: ${kh} = ${sl} (${ngay}, ${ca})`);
      }
    }

    console.log(`‚úÖ T√¨m th·∫•y ${foundCount} cache t·ª´ log`);
    return ducache;

  } catch (error) {
    console.error("‚ùå L·ªói trong duCacheLog:", error);
    return {};
  }
}

// ‚úÖ L·∫•y cache s·ªë d∆∞ t·ª´ form hi·ªán t·∫°i
export function duCacheForm(result, maxPerTrip) {
  try {
    console.log(`üìù T·∫°o cache form v·ªõi ${Array.isArray(result) ? result.length : 0} d√≤ng`);

    const ducache = {};

    if (!Array.isArray(result) || typeof maxPerTrip !== 'number' || maxPerTrip <= 0) {
      console.warn("‚ö†Ô∏è duCacheForm: Tham s·ªë kh√¥ng h·ª£p l·ªá");
      return ducache;
    }

    let foundCount = 0;

    for (const row of result) {
      if (!row || typeof row !== 'object') continue;

      const kh = String(row.kh || '').trim();
      const slRaw = String(row.sl || '').trim();
      const ca = String(row.ca || '').trim();
      const ngay = String(row.ngay || '').trim();

      // Skip invalid data
      if (!kh || !slRaw || /t$/i.test(slRaw)) continue;

      const sl = parseFloat(slRaw);
      if (isNaN(sl) || sl >= maxPerTrip || sl <= 0) continue;

      // ‚úÖ L·∫•y d√≤ng cu·ªëi c√πng cho m·ªói KH (override previous)
      ducache[kh] = {
        from: 'form',
        total: sl,
        ngay,
        ca,
        approved: false
      };
      foundCount++;
    }

    console.log(`‚úÖ T·∫°o cache form: ${foundCount} kh√°ch h√†ng`);
    return ducache;

  } catch (error) {
    console.error("‚ùå L·ªói trong duCacheForm:", error);
    return {};
  }
}

// ‚úÖ Helper function ƒë·ªÉ debug cache
export function debugCache(duCache) {
  if (!duCache || typeof duCache !== 'object') {
    console.log("üîç Cache r·ªóng ho·∫∑c kh√¥ng h·ª£p l·ªá");
    return;
  }

  console.log("üîç Debug Cache:");
  Object.entries(duCache).forEach(([kh, data]) => {
    console.log(`  ${kh}: ${data.total} (${data.from}) - ${data.ngay} ${data.ca} [approved: ${data.approved}]`);
  });
}

// ‚úÖ Function g·ªôp cache t·ª´ nhi·ªÅu ngu·ªìn
export function mergeCache(...caches) {
  try {
    const merged = {};

    for (const cache of caches) {
      if (!cache || typeof cache !== 'object') continue;
      
      Object.entries(cache).forEach(([kh, data]) => {
        if (!merged[kh]) {
          merged[kh] = { ...data };
        } else {
          // ∆Øu ti√™n cache t·ª´ form (m·ªõi h∆°n)
          if (data.from === 'form' || merged[kh].from === 'log') {
            merged[kh] = { ...data };
          }
        }
      });
    }

    console.log(`üîó ƒê√£ merge cache: ${Object.keys(merged).length} kh√°ch h√†ng`);
    return merged;

  } catch (error) {
    console.error("‚ùå L·ªói trong mergeCache:", error);
    return {};
  }
}

// ‚úÖ Enhanced utility functions
export function clearExpiredCache(duCache, expireHours = 24) {
  try {
    if (!duCache || typeof duCache !== 'object') return {};

    const now = new Date();
    const expireMs = expireHours * 60 * 60 * 1000;
    const cleaned = {};

    Object.entries(duCache).forEach(([kh, data]) => {
      if (data.timestamp) {
        const dataTime = new Date(data.timestamp);
        if (now - dataTime < expireMs) {
          cleaned[kh] = data;
        } else {
          console.log(`üóëÔ∏è Expired cache removed: ${kh}`);
        }
      } else {
        // Keep data without timestamp (backward compatibility)
        cleaned[kh] = data;
      }
    });

    return cleaned;
  } catch (error) {
    console.error("‚ùå L·ªói trong clearExpiredCache:", error);
    return duCache;
  }
}

// ‚úÖ Function to get cache statistics
export function getCacheStats(duCache) {
  if (!duCache || typeof duCache !== 'object') {
    return { total: 0, fromLog: 0, fromForm: 0, approved: 0 };
  }

  const stats = {
    total: 0,
    fromLog: 0,
    fromForm: 0,
    approved: 0,
    totalAmount: 0
  };

  Object.values(duCache).forEach(data => {
    stats.total++;
    stats.totalAmount += data.total || 0;
    
    if (data.from === 'log') stats.fromLog++;
    if (data.from === 'form') stats.fromForm++;
    if (data.approved) stats.approved++;
  });

  return stats;
}

// ‚úÖ Export to window ƒë·ªÉ c√°c file kh√°c s·ª≠ d·ª•ng
window.ngayTru1 = ngayTru1;
window.idchuyen = idchuyen;
window.duCacheLog = duCacheLog;
window.duCacheForm = duCacheForm;
window.debugCache = debugCache;
window.mergeCache = mergeCache;
window.clearExpiredCache = clearExpiredCache;
window.getCacheStats = getCacheStats;