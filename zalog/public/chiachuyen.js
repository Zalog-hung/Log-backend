// üìÅ chiachuyen.js - FIXED (Complete Implementation)

// ‚úÖ üì¶ CORE: Chia chuy·∫øn theo quy t·∫Øc - HO√ÄN CH·ªàNH
export function chiaChuyenTheoQuyTac({ khachHang, khoiLuong, ngay, ca, nextTripId, duCache = {}, maxPerTrip }) {
  console.log("üöÄ B·∫Øt ƒë·∫ßu chia chuy·∫øn v·ªõi params:", { khachHang, khoiLuong, ngay, ca, maxPerTrip });

  // ‚úÖ Validate input
  if (typeof khachHang !== 'string' || typeof khoiLuong !== 'string') {
    console.warn('‚ùå ƒê·∫ßu v√†o kh√¥ng h·ª£p l·ªá:', { khachHang, khoiLuong });
    return [];
  }

  if (!ngay || !ca || typeof maxPerTrip !== 'number' || maxPerTrip <= 0) {
    console.warn('‚ùå Th√¥ng tin chia chuy·∫øn kh√¥ng ƒë·∫ßy ƒë·ªß');
    return [];
  }

  // ‚úÖ Parse kh√°ch h√†ng v√† s·ªë l∆∞·ª£ng
  const khArr = khachHang.split('+').map(s => s.trim()).filter(Boolean);
  const slRawArr = khoiLuong.split('+').map(s => s.trim()).filter(Boolean);

  if (khArr.length !== slRawArr.length) {
    alert(`‚ùå S·ªë kh√°ch h√†ng (${khArr.length}) kh√¥ng kh·ªõp s·ªë l∆∞·ª£ng (${slRawArr.length})`);
    return [];
  }

  console.log("üìã Parsed data:", { khArr, slRawArr });

  // ‚úÖ X·ª≠ l√Ω t·ª´ng c·∫∑p KH-SL
  const khSlPairs = [];

  for (let i = 0; i < khArr.length; i++) {
    const kh = khArr[i];
    const slRaw = slRawArr[i] || '';
    const isT = /t$/i.test(slRaw);
    let sl = parseFloat(slRaw.replace(/t/gi, ''));

    console.log(`üîç X·ª≠ l√Ω KH ${kh} - SL g·ªëc: "${slRaw}" ‚ûú ${sl} (T=${isT})`);

    if (!kh || isNaN(sl) || sl <= 0) {
      alert(`‚ùå D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá t·∫°i v·ªã tr√≠ ${i + 1}:\nKH="${kh}", SL="${slRaw}"`);
      return [];
    }

    // ‚úÖ Ki·ªÉm tra cache s·ªë d∆∞
    const cache = duCache[kh];
    if (cache && cache.ngay === ngay && cache.total > 0) {
      const du = parseFloat(cache.total);
      console.log(`üì¶ T√¨m th·∫•y s·ªë d∆∞ cho ${kh}:`, du, 't·ª´:', cache.from);

      if (!isNaN(du) && du > 0) {
        if (cache.approved === true) {
          // ƒê√£ approve tr∆∞·ªõc ƒë√≥
          sl += du;
          cache._gopDu = du;
          console.log(`‚úÖ ƒê√£ g·ªôp s·∫µn: ${du} ‚ûú SL m·ªõi: ${sl}`);
        } else {
          // H·ªèi user c√≥ mu·ªën g·ªôp kh√¥ng
          const label = cache.from === 'form' ? 'd√≤ng kh√°c' : 'log c≈©';
          const dongY = confirm(`${kh} c√≥ s·ªë d∆∞ ${du} t·ª´ ${label}\nB·∫°n c√≥ mu·ªën g·ªôp v√†o kh√¥ng?`);
          console.log(`‚ùì User ch·ªçn g·ªôp d∆∞ ${du} ‚ûú`, dongY);

          if (dongY) {
            sl += du;
            cache.approved = true;
            cache._gopDu = du;
            console.log(`‚úÖ ƒê√£ g·ªôp: ${du} ‚ûú SL m·ªõi: ${sl}`);
          }
        }
      }
    }

    khSlPairs.push({ kh, sl, isT });
  }

  console.log('üìã Danh s√°ch KH-SL sau x·ª≠ l√Ω:', khSlPairs);

  // ‚úÖ PH·∫¶N 2: Th·ª±c hi·ªán chia chuy·∫øn
  const ketQua = [];
  const duArr = [];

  // T√°ch chuy·∫øn T ri√™ng
  for (const pair of khSlPairs) {
    if (pair.isT) {
      const tripId = nextTripId();
      console.log(`üöö T·∫°o chuy·∫øn T ri√™ng cho ${pair.kh}: SL = ${pair.sl}T ‚ûú tripId = ${tripId}`);
      ketQua.push({
        tripId,
        ngay,
        kh: pair.kh,
        sl: pair.sl + 'T',
        ca
      });
    } else {
      duArr.push({ kh: pair.kh, sl: pair.sl });
    }
  }

  console.log('üì¶ Danh s√°ch c·∫ßn chia theo block:', duArr);

  // N·∫øu kh√¥ng c√≥ chuy·∫øn th∆∞·ªùng, return T-trips
  if (duArr.length === 0) {
    console.log('‚úÖ Ch·ªâ c√≥ T-trips, ho√†n th√†nh');
    return ketQua;
  }

  // ‚úÖ X·ª≠ l√Ω chuy·∫øn th∆∞·ªùng
  if (duArr.length === 1) {
    // Ch·ªâ c√≥ 1 KH
    const item = duArr[0];
    console.log(`üìç 1 KH duy nh·∫•t: ${item.kh} - SL = ${item.sl}`);

    if (item.sl <= maxPerTrip) {
      // V·ª´a 1 chuy·∫øn
      const tripId = nextTripId();
      console.log(`‚úÖ SL nh·ªè ‚ûú 1 chuy·∫øn: ${tripId}`);
      ketQua.push({ 
        tripId, 
        ngay, 
        kh: item.kh, 
        sl: item.sl, 
        ca 
      });
    } else {
      // Chia nhi·ªÅu chuy·∫øn
      let remain = item.sl;
      console.log(`‚ÜîÔ∏è SL l·ªõn ‚ûú Chia nh·ªè, maxPerTrip = ${maxPerTrip}`);
      
      while (remain > 0) {
        const used = Math.min(remain, maxPerTrip);
        const tripId = nextTripId();
        console.log(`‚ûï Chuy·∫øn con: ${item.kh} - SL = ${used} ‚ûú ${tripId}`);
        ketQua.push({ 
          tripId, 
          ngay, 
          kh: item.kh, 
          sl: used, 
          ca 
        });
        remain -= used;
      }
    }

    return ketQua;
  }

  // ‚úÖ Nhi·ªÅu KH - T·ªëi ∆∞u h√≥a g·ªôp chuy·∫øn
  const tong = duArr.reduce((s, it) => s + it.sl, 0);
  console.log('üìä T·ªïng kh·ªëi l∆∞·ª£ng:', tong, '- maxPerTrip:', maxPerTrip);

  if (tong <= maxPerTrip) {
    // G·ªôp t·∫•t c·∫£ v√†o 1 chuy·∫øn
    const tripId = nextTripId();
    console.log(`‚úÖ G·ªôp t·∫•t c·∫£ v√†o 1 chuy·∫øn: ${tripId}`);

    for (const item of duArr) {
      ketQua.push({ 
        tripId, 
        ngay, 
        kh: item.kh, 
        sl: item.sl, 
        ca 
      });
    }

    return ketQua;
  }

  // ‚úÖ Logic t·ªëi ∆∞u chia chuy·∫øn ph·ª©c t·∫°p
  let waiting = [...duArr];

  while (waiting.length > 0) {
    // S·∫Øp x·∫øp theo th·ª© t·ª± gi·∫£m d·∫ßn
    waiting.sort((a, b) => b.sl - a.sl);
    const item = waiting.shift();

    if (item.sl > maxPerTrip) {
      // Item qu√° l·ªõn, chia ra
      const tripId = nextTripId();
      console.log(`‚õî ${item.kh} v∆∞·ª£t max ‚ûú Chia: ${tripId} v·ªõi SL = ${maxPerTrip}`);
      
      ketQua.push({ 
        tripId, 
        ngay, 
        kh: item.kh, 
        sl: maxPerTrip, 
        ca 
      });
      
      // Th√™m ph·∫ßn c√≤n l·∫°i v√†o waiting
      waiting.push({ 
        kh: item.kh, 
        sl: item.sl - maxPerTrip 
      });
      continue;
    }

    // T√¨m combo t·ªët nh·∫•t
    let bestCombo = [item];
    let bestSum = item.sl;

    // Th·ª≠ t·∫•t c·∫£ combination
    for (let i = 0; i < (1 << waiting.length); i++) {
      let combo = [item];
      let sum = item.sl;
      
      for (let j = 0; j < waiting.length; j++) {
        if ((i >> j) & 1 && sum + waiting[j].sl <= maxPerTrip) {
          combo.push(waiting[j]);
          sum += waiting[j].sl;
        }
      }
      
      if (sum > bestSum) {
        bestSum = sum;
        bestCombo = combo;
      }
    }

    // T·∫°o chuy·∫øn v·ªõi combo t·ªët nh·∫•t
    const tripId = nextTripId();
    console.log(`üß© Combo t·ªët nh·∫•t ‚ûú ${tripId}, SL = ${bestSum}, KH:`, bestCombo.map(x => x.kh));

    for (const it of bestCombo) {
      ketQua.push({ 
        tripId, 
        ngay, 
        kh: it.kh, 
        sl: it.sl, 
        ca 
      });
    }

    // Lo·∫°i b·ªè items ƒë√£ d√πng
    waiting = waiting.filter(w => !bestCombo.includes(w));
  }

  console.log('‚úÖ K·∫øt qu·∫£ chia chuy·∫øn ho√†n th√†nh:', ketQua);
  return ketQua;
}

// ‚úÖ Wrapper function ƒë·ªÉ t∆∞∆°ng th√≠ch v·ªõi legacy code
export function chiaChuyenTheoQuyTac_Legacy(rowData) {
  try {
    // Extract data from rowData object
    const khachHang = rowData.khachHang || '';
    const soLuong = rowData.soLuong || '';
    const ngay = rowData.ngay || '';
    const ca = rowData.ca || '';
    
    // Default values
    const maxPerTrip = 10; // Default max per trip
    const duCache = {}; // Empty cache for now
    
    // Create nextTripId function
    const nextTripId = () => {
      const now = new Date();
      const dateStr = `${String(now.getDate()).padStart(2, '0')}.${String(now.getMonth() + 1).padStart(2, '0')}`;
      const counter = Math.floor(Math.random() * 999) + 1;
      return `${dateStr}.${String(counter).padStart(3, '0')}`;
    };

    // Call main function with proper parameters
    const result = chiaChuyenTheoQuyTac({
      khachHang,
      khoiLuong: soLuong, // Map soLuong to khoiLuong
      ngay,
      ca,
      nextTripId,
      duCache,
      maxPerTrip
    });

    // Transform result to match expected format
    return result.map(item => ({
      idChuyen: item.tripId,
      ngay: item.ngay,
      khachHang: item.kh,
      soLuong: String(item.sl),
      ca: item.ca,
      taiXe: rowData.taiXe || '' // Keep original driver
    }));

  } catch (error) {
    console.error('‚ùå L·ªói trong chiaChuyenTheoQuyTac_Legacy:', error);
    return [];
  }
}

// ‚úÖ Export both versions for compatibility
export { chiaChuyenTheoQuyTac_Legacy as default };