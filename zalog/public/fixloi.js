// üìÅ fixloi.js - ENHANCED INTEGRATION (Dual Mode Compatible)
// Version: 3.0 - Compatible v·ªõi c·∫£ Event Delegation v√† Legacy Handlers

// ‚úÖ Import required functions
import { ngayTru1, idchuyen, duCacheLog, duCacheForm, mergeCache } from './cache.js';
import { chiaChuyenTheoQuyTac } from './chiachuyen.js';

// üîß DETECT SYSTEM MODE
function getSystemMode() {
  return {
    eventDelegation: window._eventDelegationActive || false,
    oldHandlers: window._oldHandlersActive || false,
    formConfig: window.formConfig || null,
    zacache: window.zacache || null
  };
}

// ‚úÖ H√†m kh·ªüi ƒë·ªông h·ªá th·ªëng ch√≠nh - ENHANCED
export async function khoiDongHeThong() {
  try {
    const mode = getSystemMode();
    console.log("üöÄ B·∫Øt ƒë·∫ßu kh·ªüi ƒë·ªông h·ªá th·ªëng enhanced‚Ä¶");
    console.log("üìä System mode:", mode);

    // ‚úÖ Ki·ªÉm tra c√°c bi·∫øn global t·ª´ cauhinh.js
    if (!mode.formConfig || !mode.zacache) {
      throw new Error("‚ùå cauhinh.js ch∆∞a load - thi·∫øu formConfig ho·∫∑c zacache");
    }

    // ‚úÖ DUAL MODE: Initialize handlers based on active system
    if (mode.eventDelegation) {
      console.log("üì° Event delegation mode - skipping individual handler assignment");
      // Event delegation t·ª± ƒë·ªông handle t·∫•t c·∫£ inputs
    } else if (mode.oldHandlers) {
      console.log("üîÑ Legacy mode - assigning handlers to existing inputs");
      ganChoTatCaInput();
    } else {
      console.warn("‚ö†Ô∏è No handler system detected - may cause issues");
    }

    // ‚úÖ Enhanced window functions
    setupEnhancedWindowFunctions();

    // ‚úÖ Load ShowLog n·∫øu c√≥ s·∫µn
    if (typeof window.ShowLog === 'function') {
      try {
        await window.ShowLog();
        console.log('üìã ShowLog() ƒë√£ load th√†nh c√¥ng');
      } catch (e) {
        console.warn('‚ö†Ô∏è ShowLog() c√≥ l·ªói:', e.message);
      }
    }

    console.log("‚úÖ H·ªá th·ªëng enhanced ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!");

  } catch (error) {
    console.error("‚ùå L·ªói kh·ªüi ƒë·ªông h·ªá th·ªëng enhanced:", error);
    throw error;
  }
}

// ‚úÖ G√°n event handlers cho t·∫•t c·∫£ input - LEGACY MODE ONLY
export function ganChoTatCaInput() {
  const mode = getSystemMode();

  if (mode.eventDelegation) {
    console.log("üì° Event delegation active - skipping individual handlers");
    return;
  }

  console.log("üîÑ G√°n handlers legacy cho t·∫•t c·∫£ input hi·ªán c√≥‚Ä¶");
  document.querySelectorAll('input[data-col]').forEach(ganCho1Input);
}

// ‚úÖ G√°n event handler cho 1 input - LEGACY MODE
function ganCho1Input(input) {
  const mode = getSystemMode();

  if (mode.eventDelegation) {
    return; // Skip trong event delegation mode
  }

  const col = parseInt(input.dataset.col);
  try {
    const handler = mode.zacache?.handlers?.[col];
    if (typeof handler === 'function') {
      handler(input);
      console.log(`‚úÖ G√°n handler legacy cho c·ªôt ${col}`);
    } else {
      console.warn(`‚ö†Ô∏è Kh√¥ng c√≥ handler cho c·ªôt ${col}`);
    }
  } catch (err) {
    console.warn(`‚ö†Ô∏è L·ªói x·ª≠ l√Ω c·ªôt ${col}:`, err);
  }
}

// ‚úÖ G√°n event handlers cho 1 d√≤ng - DUAL MODE COMPATIBLE
export function ganCho1Dong(inputArray) {
  const mode = getSystemMode();

  if (mode.eventDelegation) {
    console.log("üì° Event delegation mode - new row auto-handled");
    return;
  }

  if (Array.isArray(inputArray)) {
    console.log(`üîÑ G√°n handlers legacy cho ${inputArray.length} inputs`);
    inputArray.forEach(ganCho1Input);
  }
}

// ‚úÖ Enhanced window functions setup
function setupEnhancedWindowFunctions() {
  console.log("üîß Setting up enhanced window functions‚Ä¶");

  // ‚úÖ ENHANCED SPLIT ROW - T√≠ch h·ª£p v·ªõi c·∫£ 2 mode
  window.splitRow = function(button) {
    console.log("‚öôÔ∏è Enhanced split row function");
    
    try {
      const mode = getSystemMode();
      
      // T√¨m d√≤ng ch·ª©a n√∫t split
      const actionCell = button.closest('.excel-cell') || button.closest('.action-cell');
      if (!actionCell) {
        throw new Error("Kh√¥ng t√¨m th·∫•y action cell");
      }

      const gridElement = document.querySelector('.excel-grid');
      if (!gridElement) {
        throw new Error("Kh√¥ng t√¨m th·∫•y excel grid");
      }

      const allCells = Array.from(gridElement.children);
      const actionIndex = allCells.indexOf(actionCell);
      
      // T√≠nh v·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ªßa d√≤ng (7 cells per row)
      const rowStartIndex = Math.floor(actionIndex / 7) * 7;
      const rowCells = allCells.slice(rowStartIndex, rowStartIndex + 6);
      const inputs = rowCells.map(cell => cell.querySelector('input')).filter(Boolean);
      
      if (inputs.length < 6) {
        throw new Error("D√≤ng kh√¥ng ƒë·∫ßy ƒë·ªß 6 input fields");
      }

      // Thu th·∫≠p d·ªØ li·ªáu t·ª´ d√≤ng
      const rowData = {
        idChuyen: inputs[0].value.trim(),
        ngay: inputs[1].value.trim(),
        khachHang: inputs[2].value.trim(),
        soLuong: inputs[3].value.trim(),
        ca: inputs[4].value.trim(),
        taiXe: inputs[5].value.trim()
      };

      // Validation c∆° b·∫£n
      if (!rowData.khachHang || !rowData.soLuong) {
        alert("‚ö†Ô∏è C·∫ßn c√≥ √≠t nh·∫•t th√¥ng tin Kh√°ch h√†ng v√† S·ªë l∆∞·ª£ng ƒë·ªÉ chia chuy·∫øn!");
        return;
      }

      // G·ªçi function chia chuy·∫øn
      const ketQua = chiaChuyenTheoQuyTac(rowData);
      
      if (ketQua && ketQua.length > 1) {
        // X√≥a d√≤ng hi·ªán t·∫°i
        if (typeof window.deleteRow === 'function') {
          window.deleteRow(button);
        }
        
        // Th√™m c√°c d√≤ng m·ªõi
        ketQua.forEach(dongMoi => {
          if (typeof window.addNewRow === 'function') {
            const newInputs = window.addNewRow();
            if (newInputs && newInputs.length >= 6) {
              newInputs[0].value = dongMoi.idChuyen || '';
              newInputs[1].value = dongMoi.ngay || '';
              newInputs[2].value = dongMoi.khachHang || '';
              newInputs[3].value = dongMoi.soLuong || '';
              newInputs[4].value = dongMoi.ca || '';
              newInputs[5].value = dongMoi.taiXe || '';
            }
          }
        });
        
        alert(`‚úÖ ƒê√£ chia th√†nh ${ketQua.length} chuy·∫øn!`);
        console.log("üéØ Split row completed:", ketQua);
      } else {
        alert("‚ÑπÔ∏è D√≤ng n√†y kh√¥ng c·∫ßn chia ho·∫∑c kh√¥ng ƒë·ªß ƒëi·ªÅu ki·ªán chia!");
      }

    } catch (error) {
      console.error("‚ùå L·ªói khi chia chuy·∫øn:", error);
      alert(`‚ö†Ô∏è C√≥ l·ªói khi chia chuy·∫øn: ${error.message}`);
    }
  };

  // ‚úÖ ENHANCED ADD NEW ROW
  window.addNewRow = function() {
    console.log("‚ûï Enhanced add new row function");
    
    try {
      const gridElement = document.querySelector('.excel-grid');
      if (!gridElement) {
        throw new Error("Kh√¥ng t√¨m th·∫•y excel grid");
      }

      // T·∫°o 6 input cells + 1 action cell
      const newInputs = [];
      
      for (let col = 0; col < 6; col++) {
        const cell = document.createElement('div');
        cell.className = 'excel-cell';
        
        const input = document.createElement('input');
        input.type = 'text';
        input.dataset.col = col;
        
        // Set placeholder cho c·ªôt ng√†y
        if (col === 1) {
          input.placeholder = 'dd/mm/yyyy';
        }
        
        cell.appendChild(input);
        gridElement.appendChild(cell);
        newInputs.push(input);
      }

      // T·∫°o action cell
      const actionCell = document.createElement('div');
      actionCell.className = 'excel-cell action-cell';
      actionCell.innerHTML = `
        <button onclick="editRow(this)" title="S·ª≠a d√≤ng n√†y">‚úèÔ∏è</button>
        <button onclick="deleteRow(this)" title="X√≥a d√≤ng n√†y">üóëÔ∏è</button>
        <button onclick="splitRow(this)" title="Chia chuy·∫øn theo quy t·∫Øc">‚öôÔ∏è</button>
      `;
      gridElement.appendChild(actionCell);

      // G√°n handlers cho d√≤ng m·ªõi (ch·ªâ trong legacy mode)
      ganCho1Dong(newInputs);

      console.log("‚úÖ ƒê√£ th√™m d√≤ng m·ªõi th√†nh c√¥ng");
      return newInputs;

    } catch (error) {
      console.error("‚ùå L·ªói khi th√™m d√≤ng m·ªõi:", error);
      alert(`‚ö†Ô∏è C√≥ l·ªói khi th√™m d√≤ng: ${error.message}`);
      return null;
    }
  };

  // ‚úÖ ENHANCED DELETE ROW
  window.deleteRow = function(button) {
    console.log("üóëÔ∏è Enhanced delete row function");
    
    try {
      const actionCell = button.closest('.excel-cell') || button.closest('.action-cell');
      if (!actionCell) {
        throw new Error("Kh√¥ng t√¨m th·∫•y action cell");
      }

      const gridElement = document.querySelector('.excel-grid');
      if (!gridElement) {
        throw new Error("Kh√¥ng t√¨m th·∫•y excel grid");
      }

      const allCells = Array.from(gridElement.children);
      const actionIndex = allCells.indexOf(actionCell);
      
      // T√≠nh v·ªã tr√≠ b·∫Øt ƒë·∫ßu c·ªßa d√≤ng (7 cells per row)
      const rowStartIndex = Math.floor(actionIndex / 7) * 7;
      
      // X√°c nh·∫≠n x√≥a
      if (!confirm("üóëÔ∏è B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a d√≤ng n√†y?")) {
        return;
      }
      
      // X√≥a 7 cells (6 input + 1 action)
      for (let i = 0; i < 7; i++) {
        const cellToRemove = allCells[rowStartIndex + i];
        if (cellToRemove) {
          cellToRemove.remove();
        }
      }

      console.log("‚úÖ ƒê√£ x√≥a d√≤ng th√†nh c√¥ng");

    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a d√≤ng:", error);
      alert(`‚ö†Ô∏è C√≥ l·ªói khi x√≥a d√≤ng: ${error.message}`);
    }
  };

  console.log("‚úÖ Enhanced window functions setup completed");
}

// ‚úÖ Cleanup function
export function cleanupEnhancedSystem() {
  console.log("üßπ Cleaning up enhanced system‚Ä¶");
  
  // Reset window functions to placeholder
  ['splitRow', 'addNewRow', 'deleteRow'].forEach(funcName => {
    if (window[funcName]) {
      window[funcName] = function() {
        console.warn(`‚ö†Ô∏è ${funcName} has been cleaned up`);
        alert('Ch·ª©c nƒÉng n√†y ƒë√£ ƒë∆∞·ª£c reset. Vui l√≤ng reload trang!');
      };
    }
  });
  
  console.log("‚úÖ Enhanced system cleanup completed");
}

// ‚úÖ Export cho window ƒë·ªÉ debug
window.khoiDongHeThong = khoiDongHeThong;
window.ganChoTatCaInput = ganChoTatCaInput;
window.cleanupEnhancedSystem = cleanupEnhancedSystem;