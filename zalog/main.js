// =================================================================
// === KHAI B√ÅO BI·∫æN V√Ä H·∫∞NG S·ªê ===
// =================================================================
const KHACH_HANG_API_URL = "https://script.google.com/macros/s/AKfycbw6DcLseuze9340EK396D1JE9Of1qk0eyzQGd1Te19p0gnn-dwwioq1zS_1Iwe1WNY/exec";
const LOG_API_URL = "https://script.google.com/macros/s/AKfycbwhGc1NHndpO2IYfEhFDFAiLHyTi1LqlWFSnfqtSxWPEQ5bCw7r4idZ23qvb83PitB0Dw/exec";
const GHI_LOG_PROXY_URL = 'https://za-log-proxy-4pkb9hu3p-hung-za.vercel.app/api/proxy';
const FORM_COLUMN_COUNT = 6;

let khachHangList = [];
let suggestionBox = null; // ‚úÖ S·ª¨A L·ªñI: Ch·ªâ d√πng m·ªôt h·ªôp g·ª£i √Ω duy nh·∫•t cho to√†n b·ªô ·ª©ng d·ª•ng

// =================================================================
// === C√ÅC H√ÄM TI·ªÜN √çCH (HELPER FUNCTIONS) ===
// =================================================================
function createElement(tag, options = {}) {
    const el = document.createElement(tag);
    Object.entries(options).forEach(([key, value]) => {
        if (key === 'className') el.className = value;
        else if (key === 'textContent') el.textContent = value;
        else if (key === 'dataset') Object.assign(el.dataset, value);
        else el.setAttribute(key, value);
    });
    return el;
}

// =================================================================
// === C√ÅC H√ÄM T·∫¢I D·ªÆ LI·ªÜU (DATA FETCHING) ===
// =================================================================
async function loadKhachHangList() {
    try {
        const res = await fetch(KHACH_HANG_API_URL);
        khachHangList = await res.json();
        console.log("‚úÖ T·∫£i danh s√°ch kh√°ch h√†ng th√†nh c√¥ng:", khachHangList.length, "kh√°ch h√†ng");
    } catch (err) {
        console.error("‚ùå L·ªói kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch kh√°ch h√†ng:", err);
        alert("L·ªói: Kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch kh√°ch h√†ng. Ch·ª©c nƒÉng g·ª£i √Ω s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.");
    }
}

// H√†m fetchAndShowLog gi·ªØ nguy√™n, kh√¥ng thay ƒë·ªïi

// =================================================================
// === C√ÅC H√ÄM GIAO DI·ªÜN V√Ä S·ª∞ KI·ªÜN (UI & EVENTS) ===
// =================================================================
function makeGridResizable() { /* Logic gi·ªØ nguy√™n */ }
function addNewRow() { /* Logic gi·ªØ nguy√™n */ }

/**
 * ‚úÖ S·ª¨A L·ªñI: T√°i c·∫•u tr√∫c l·∫°i to√†n b·ªô h√†m x·ª≠ l√Ω g·ª£i √Ω
 * @param {HTMLInputElement} input - √î input ƒëang ƒë∆∞·ª£c g√µ.
 */
function handleKhachHang(input) {
    // Hi·ªán h·ªôp g·ª£i √Ω v·ªõi danh s√°ch ƒë√£ l·ªçc
    const showSuggestions = (filtered) => {
        if (!suggestionBox) return; // N·∫øu h·ªôp ch∆∞a ƒë∆∞·ª£c t·∫°o th√¨ tho√°t

        const rect = input.getBoundingClientRect();
        suggestionBox.style.left = `${rect.left + window.scrollX}px`;
        suggestionBox.style.top = `${rect.bottom + window.scrollY}px`;
        suggestionBox.style.width = `${rect.width}px`;
        suggestionBox.innerHTML = ''; // X√≥a c√°c g·ª£i √Ω c≈©
        
        if (!filtered.length) {
            suggestionBox.style.display = 'none';
            return;
        }

        filtered.forEach(name => {
            const item = createElement('div', { className: 'suggestion-item', textContent: name });
            item.addEventListener('mousedown', (e) => { // D√πng mousedown ƒë·ªÉ s·ª± ki·ªán blur kh√¥ng k·ªãp ch·∫°y tr∆∞·ªõc
                e.preventDefault();
                const lastPlusIndex = input.value.lastIndexOf('+');
                const base = lastPlusIndex === -1 ? '' : input.value.slice(0, lastPlusIndex + 1).trim() + ' ';
                input.value = base + name;
                suggestionBox.style.display = 'none';
                input.focus();
            });
            suggestionBox.appendChild(item);
        });
        suggestionBox.style.display = 'block';
    };
    
    // C·∫≠p nh·∫≠t danh s√°ch g·ª£i √Ω m·ªói khi ng∆∞·ªùi d√πng g√µ
    const onInput = () => {
        if (!khachHangList.length) return; // N·∫øu danh s√°ch kh√°ch h√†ng r·ªóng th√¨ kh√¥ng l√†m g√¨
        const lastPlusIndex = input.value.lastIndexOf('+');
        const searchText = (lastPlusIndex === -1 ? input.value : input.value.slice(lastPlusIndex + 1)).trim().toLowerCase();
        
        if (!searchText) {
            if (suggestionBox) suggestionBox.style.display = 'none';
            return;
        }
        const filtered = khachHangList.filter(kh => kh.toLowerCase().includes(searchText));
        showSuggestions(filtered);
    };
    
    // ·∫®n h·ªôp g·ª£i √Ω khi ng∆∞·ªùi d√πng click ra ngo√†i
    const onBlur = () => {
        setTimeout(() => {
            if (suggestionBox) suggestionBox.style.display = 'none';
        }, 150); // Delay m·ªôt ch√∫t ƒë·ªÉ s·ª± ki·ªán click v√†o g·ª£i √Ω k·ªãp ch·∫°y
    };

    // G·∫Øn s·ª± ki·ªán
    input.addEventListener('input', onInput);
    input.addEventListener('blur', onBlur);
}

// C√°c h√†m handleSoLuong, handleNgay, handleInputByIndex, ghiLogData gi·ªØ nguy√™n
function handleSoLuong(input) { /* Logic gi·ªØ nguy√™n */ }
function handleNgay(input) { /* Logic gi·ªØ nguy√™n */ }
function handleInputByIndex(index, input) { /* Logic gi·ªØ nguy√™n */ }
function ghiLogData() { /* Logic gi·ªØ nguy√™n */ }

/**
 * G·∫Øn c√°c s·ª± ki·ªán c·∫ßn thi·∫øt cho m·ªôt d√≤ng input.
 * @param {HTMLInputElement[]} inputs - M·∫£ng c√°c √¥ input c·ªßa m·ªôt d√≤ng.
 */
function attachEventListenersToRow(inputs) {
    if (!inputs || inputs.length === 0) return;

    inputs.forEach((input, index) => {
        // Ch·ªâ g·∫Øn x·ª≠ l√Ω g·ª£i √Ω cho √¥ kh√°ch h√†ng (c·ªôt th·ª© 3, index = 2)
        if (index === 2) {
            handleKhachHang(input);
        }

        // ƒêi·ªÅu h∆∞·ªõng b·∫±ng ph√≠m Enter
        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                handleInputByIndex(index, input); // X·ª≠ l√Ω d·ªØ li·ªáu khi Enter

                const nextIndex = index + 1;
                if (nextIndex < inputs.length) {
                    inputs[nextIndex].focus(); // Chuy·ªÉn sang √¥ k·∫ø ti·∫øp
                } else {
                    const newInputs = addNewRow(); // H·∫øt d√≤ng th√¨ th√™m d√≤ng m·ªõi
                    attachEventListenersToRow(newInputs); // G·∫Øn s·ª± ki·ªán cho d√≤ng m·ªõi ƒë√≥
                    newInputs[0].focus(); // Focus v√†o √¥ ƒë·∫ßu ti√™n c·ªßa d√≤ng m·ªõi
                }
            }
        });
    });
}


// =================================================================
// === KH·ªêI L·ªÜNH CH√çNH (MAIN EXECUTION BLOCK) ===
// =================================================================

/**
 * ‚úÖ S·ª¨A L·ªñI: T·∫°o m·ªôt h√†m `init` b·∫•t ƒë·ªìng b·ªô ƒë·ªÉ ƒë·∫£m b·∫£o th·ª© t·ª± th·ª±c thi
 */
async function initApp() {
    console.log("üöÄ ·ª®ng d·ª•ng ƒëang kh·ªüi ch·∫°y...");
    
    // B∆∞·ªõc 1: T·∫°o c√°c th√†nh ph·∫ßn giao di·ªán chung
    suggestionBox = createElement('div', { className: 'suggestions-container' });
    document.body.appendChild(suggestionBox); // T·∫°o h·ªôp g·ª£i √Ω v√† ·∫©n n√≥ ƒëi
    suggestionBox.style.display = 'none';

    // B∆∞·ªõc 2: T·∫£i c√°c d·ªØ li·ªáu n·ªÅn. D√πng `await` ƒë·ªÉ ch·ªù t·∫£i xong danh s√°ch kh√°ch h√†ng.
    await loadKhachHangList();
    // fetchAndShowLog(); // C√≥ th·ªÉ ch·∫°y song song kh√¥ng c·∫ßn await n·∫øu mu·ªën

    // B∆∞·ªõc 3: Sau khi ƒë√£ c√≥ d·ªØ li·ªáu, b·∫Øt ƒë·∫ßu g·∫Øn c√°c s·ª± ki·ªán
    const grid = document.querySelector(".excel-grid");
    if (!grid) {
        console.error("Kh√¥ng t√¨m th·∫•y .excel-grid!");
        return;
    }

    document.getElementById('addRowBtn')?.addEventListener('click', () => {
        const newInputs = addNewRow();
        attachEventListenersToRow(newInputs);
        newInputs[0].focus();
    });
    
    document.getElementById('logBtn')?.addEventListener('click', ghiLogData);

    const existingInputs = Array.from(grid.querySelectorAll('input'));
    for (let i = 0; i < existingInputs.length; i += FORM_COLUMN_COUNT) {
        attachEventListenersToRow(existingInputs.slice(i, i + FORM_COLUMN_COUNT));
    }

    makeGridResizable();
    
    console.log("‚úÖ ·ª®ng d·ª•ng ƒë√£ s·∫µn s√†ng!");
}


// Ch·∫°y h√†m kh·ªüi t·∫°o ch√≠nh khi trang ƒë√£ t·∫£i xong
document.addEventListener('DOMContentLoaded', initApp);
