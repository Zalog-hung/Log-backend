// =================================================================
// === KHAI B√ÅO BI·∫æN V√Ä H·∫∞NG S·ªê ===
// =================================================================

// ‚úÖ Tinh g·ªçn: D√πng h·∫±ng s·ªë ƒë·ªÉ d·ªÖ qu·∫£n l√Ω v√† thay ƒë·ªïi URL
const KHACH_HANG_API_URL = "https://script.google.com/macros/s/AKfycbw6DcLseuze9340EK396D1JE9Of1qk0eyzQGd1Te19p0gnn-dwwioq1zS_1Iwe1WNY/exec";
const LOG_API_URL = "https://script.google.com/macros/s/AKfycbwhGc1NHndpO2IYfEhFDFAiLHyTi1LqlWFSnfqtSxWPEQ5bCw7r4idZ23qvb83PitB0Dw/exec";
const GHI_LOG_PROXY_URL = 'https://za-log-proxy-4pkb9hu3p-hung-za.vercel.app/api/proxy';
const FORM_COLUMN_COUNT = 6; // S·ªë c·ªôt trong grid nh·∫≠p li·ªáu
const LOG_COLUMN_COUNT = 26; // S·ªë c·ªôt trong b·∫£ng log

let khachHangList = []; // Bi·∫øn to√†n c·ª•c l∆∞u danh s√°ch kh√°ch h√†ng

// =================================================================
// === C√ÅC H√ÄM TI·ªÜN √çCH (HELPER FUNCTIONS) ===
// =================================================================

/**
 * ‚úÖ Tinh g·ªçn: H√†m ti·ªán √≠ch ƒë·ªÉ t·∫°o ph·∫ßn t·ª≠ HTML m·ªôt c√°ch ng·∫Øn g·ªçn.
 * @param {string} tag - T√™n th·∫ª HTML (v√≠ d·ª•: 'div', 'table').
 * @param {object} options - C√°c thu·ªôc t√≠nh cho th·∫ª (className, textContent, ...).
 * @returns {HTMLElement} - Ph·∫ßn t·ª≠ HTML ƒë√£ ƒë∆∞·ª£c t·∫°o.
 */
function createElement(tag, options = {}) {
    const el = document.createElement(tag);
    // G√°n c√°c thu·ªôc t√≠nh cho ph·∫ßn t·ª≠
    Object.entries(options).forEach(([key, value]) => {
        if (key === 'className') el.className = value;
        else if (key === 'textContent') el.textContent = value;
        else if (key === 'dataset') Object.assign(el.dataset, value);
        else el.setAttribute(key, value);
    });
    return el;
}

// =================================================================
// === C√ÅC H√ÄM T·∫¢I D·ªÆ LI·ªÜU (DATA FETCHING) ===
// =================================================================

async function loadKhachHangList() {
    try {
        const res = await fetch(KHACH_HANG_API_URL);
        khachHangList = await res.json();
        console.log("‚úÖ T·∫£i danh s√°ch kh√°ch h√†ng th√†nh c√¥ng:", khachHangList.length, "kh√°ch h√†ng");
    } catch (err) {
        console.error("‚ùå L·ªói kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch kh√°ch h√†ng:", err);
    }
}

async function fetchAndShowLog() {
    const logArea = document.getElementById('logArea');
    if (!logArea) return;
    logArea.innerHTML = '[LOG] H·ªá th·ªëng s·∫µn s√†ng.<br>‚è≥ ƒêang t·∫£i log...';

    try {
        const response = await fetch(LOG_API_URL);
        const data = await response.json();

        if (!data || data.length <= 1) {
            logArea.innerHTML += '<br>‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu log.';
            return;
        }

        logArea.innerHTML = `[LOG] H·ªá th·ªëng s·∫µn s√†ng.<br>üìã T√¨m th·∫•y ${data.length - 1} d√≤ng log:`;

        // ‚úÖ Tinh g·ªçn: D√πng h√†m createElement v√† class CSS, kh√¥ng style tr·ª±c ti·∫øp
        const table = createElement('table', { className: 'log-table' });
        
        // --- T·∫°o Header ---
        const trHead = createElement('tr');
        const headers = (Array.isArray(data[0]) ? data[0] : Object.values(data[0])).slice(0, LOG_COLUMN_COUNT);
        for (let i = 0; i < LOG_COLUMN_COUNT; i++) {
            trHead.appendChild(createElement('th', { textContent: headers[i] || '' }));
        }
        table.appendChild(trHead);

        // --- T·∫°o Body ---
        data.slice(1).forEach((rawRowData, rowIndex) => {
            if (!rawRowData || rawRowData.slice(0, LOG_COLUMN_COUNT).every(cell => cell === '')) return; // B·ªè qua d√≤ng tr·ªëng
            
            const tr = createElement('tr');
            for (let col = 0; col < LOG_COLUMN_COUNT; col++) {
                const td = createElement('td', {
                    textContent: rawRowData[col] || '',
                    contentEditable: true,
                    dataset: { row: rowIndex + 1, col } // +1 ƒë·ªÉ kh·ªõp v·ªõi s·ªë d√≤ng trong sheet
                });
                td.addEventListener('blur', () => {
                    console.log(`üìù S·ª≠a log: d√≤ng ${rowIndex + 2}, c·ªôt ${String.fromCharCode(65 + col)} ‚Üí "${td.textContent.trim()}"`);
                    // TODO: G·ª≠i d·ªØ li·ªáu ƒë√£ s·ª≠a l√™n server
                });
                tr.appendChild(td);
            }
            table.appendChild(tr);
        });
        
        const wrapper = createElement('div', { className: 'log-table-wrapper' });
        wrapper.appendChild(table);
        logArea.appendChild(wrapper);

    } catch (err) {
        logArea.innerHTML += '<br>‚ùå L·ªói khi t·∫£i log.';
        console.error(err);
    }
}

// =================================================================
// === C√ÅC H√ÄM GIAO DI·ªÜN V√Ä S·ª∞ KI·ªÜN (UI & EVENTS) ===
// =================================================================

function makeGridResizable() { /* Logic gi·ªØ nguy√™n nh∆∞ c≈© */ }

function addNewRow() {
    const grid = document.querySelector('.excel-grid');
    const allInputs = Array.from(grid.querySelectorAll('input'));
    const lastRowInputs = allInputs.slice(-FORM_COLUMN_COUNT);
    const newRowInputs = [];

    // T·∫°o c√°c √¥ input cho d√≤ng m·ªõi
    for (let i = 0; i < FORM_COLUMN_COUNT; i++) {
        const input = createElement('input', { type: 'text' });
        if (i === 4) input.setAttribute('list', 'ca-list'); // G√°n datalist cho √¥ "Ca"
        
        // Sao ch√©p gi√° tr·ªã t·ª´ d√≤ng tr∆∞·ªõc cho √¥ "Ng√†y" (1) v√† "Ca" (4)
        if ((i === 1 || i === 4) && lastRowInputs[i]?.value) {
            input.value = lastRowInputs[i].value;
        }

        const cell = createElement('div', { className: 'excel-cell' });
        cell.appendChild(input);
        grid.appendChild(cell);
        newRowInputs.push(input);
    }

    // T·∫°o √¥ h√†nh ƒë·ªông
    const actionCell = createElement('div', { className: 'excel-cell action-cell' });
    actionCell.innerHTML = `<button onclick="editRow(this)">‚úèÔ∏è</button><button onclick="deleteRow(this)">üóëÔ∏è</button>`;
    grid.appendChild(actionCell);

    makeGridResizable(); // C·∫≠p nh·∫≠t l·∫°i tay c·∫ßm resize
    return newRowInputs; // Tr·∫£ v·ªÅ c√°c input c·ªßa d√≤ng m·ªõi ƒë·ªÉ g·∫Øn s·ª± ki·ªán
}

function handleKhachHang(input) {
    let suggestionBox = document.querySelector('.suggestions-container');
    if (!suggestionBox) {
        // ‚úÖ Tinh g·ªçn: D√πng h√†m createElement, style ƒë√£ c√≥ trong CSS
        suggestionBox = createElement('div', { className: 'suggestions-container' });
        document.body.appendChild(suggestionBox);
    }

    const showSuggestions = (filtered) => {
        const rect = input.getBoundingClientRect();
        suggestionBox.style.left = `${rect.left + window.scrollX}px`;
        suggestionBox.style.top = `${rect.bottom + window.scrollY}px`;
        suggestionBox.style.width = `${rect.width}px`;
        suggestionBox.innerHTML = '';
        
        if (!filtered.length) {
            suggestionBox.style.display = 'none';
            return;
        }

        filtered.forEach(name => {
            const item = createElement('div', { className: 'suggestion-item', textContent: name });
            item.addEventListener('mousedown', (e) => {
                e.preventDefault();
                const lastPlusIndex = input.value.lastIndexOf('+');
                const base = lastPlusIndex === -1 ? '' : input.value.slice(0, lastPlusIndex + 1).trim() + ' ';
                input.value = base + name;
                suggestionBox.style.display = 'none';
                input.focus();
                setTimeout(() => input.selectionStart = input.selectionEnd = input.value.length, 0);
            });
            suggestionBox.appendChild(item);
        });
        suggestionBox.style.display = 'block';
    };

    const updateSuggestions = () => {
        const lastPlusIndex = input.value.lastIndexOf('+');
        const searchText = (lastPlusIndex === -1 ? input.value : input.value.slice(lastPlusIndex + 1)).trim().toLowerCase();
        
        if (!searchText) {
            if (suggestionBox) suggestionBox.style.display = 'none';
            return;
        }
        showSuggestions(khachHangList.filter(kh => kh.toLowerCase().includes(searchText)));
    };
    
    input.addEventListener('input', updateSuggestions);
    input.addEventListener('blur', () => setTimeout(() => { if (suggestionBox) suggestionBox.style.display = 'none'; }, 150));
}

function handleSoLuong(input) { /* Logic gi·ªØ nguy√™n nh∆∞ c≈© */ }
function handleNgay(input) { /* Logic gi·ªØ nguy√™n nh∆∞ c≈© */ }

function handleInputByIndex(index, input) { /* Logic gi·ªØ nguy√™n nh∆∞ c≈© */ }

function attachEnterNavigation(inputs) { /* Logic gi·ªØ nguy√™n nh∆∞ c≈© */ }

function ghiLogData() {
    const grid = document.querySelector('.excel-grid');
    const rows = [];
    const inputs = Array.from(grid.querySelectorAll('input'));

    for (let i = 0; i < inputs.length; i += FORM_COLUMN_COUNT) {
        const rowData = inputs.slice(i, i + FORM_COLUMN_COUNT).map(input => input.value.trim());
        if (!rowData.every(val => val === '')) {
            rows.push(rowData);
        }
    }

    if (rows.length === 0) {
        alert('‚ö†Ô∏è Kh√¥ng c√≥ d√≤ng d·ªØ li·ªáu ƒë·ªÉ ghi log.');
        return;
    }

    // ‚úÖ Tinh g·ªçn: Fetch logic
    fetch(GHI_LOG_PROXY_URL, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ rows })
    })
    .then(res => res.ok ? res.json() : Promise.reject(new Error(`Server responded with status ${res.status}`)))
    .then(data => {
        if (data.status === 'success') {
            alert(`‚úÖ ${data.message || 'Ghi log th√†nh c√¥ng!'}`);
            console.log('[Ghi Log]', rows);
        } else {
            throw new Error(data.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ server.');
        }
    })
    .catch(err => {
        console.error('‚ùå L·ªói khi ghi log:', err);
        alert('‚ùå L·ªói khi ghi log:\n' + err.message);
    });
}

// =================================================================
// === KH·ªêI L·ªÜNH CH√çNH (MAIN EXECUTION BLOCK) ===
// =================================================================

document.addEventListener('DOMContentLoaded', () => {
    console.log("üöÄ giaodien.js ƒë√£ s·∫µn s√†ng!");

    // 1. T·∫£i c√°c d·ªØ li·ªáu c·∫ßn thi·∫øt
    loadKhachHangList();
    fetchAndShowLog();

    const grid = document.querySelector(".excel-grid");
    if (!grid) {
        console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ .excel-grid!");
        return;
    }

    // 2. G·∫Øn s·ª± ki·ªán cho c√°c n√∫t
    document.getElementById('addRowBtn')?.addEventListener('click', () => {
        const newInputs = addNewRow();
        attachEnterNavigation(newInputs);
        newInputs[0].focus();
    });
    
    // ‚úÖ S·ª≠a l·ªói: ƒê∆∞a event listener c·ªßa n√∫t Ghi Log v√†o trong DOMContentLoaded
    document.getElementById('logBtn')?.addEventListener('click', ghiLogData);

    // 3. G·∫Øn s·ª± ki·ªán cho c√°c d√≤ng ƒë√£ c√≥ s·∫µn
    const existingInputs = Array.from(grid.querySelectorAll('input'));
    for (let i = 0; i < existingInputs.length; i += FORM_COLUMN_COUNT) {
        attachEnterNavigation(existingInputs.slice(i, i + FORM_COLUMN_COUNT));
    }

    // 4. Kh·ªüi ch·∫°y ch·ª©c nƒÉng thay ƒë·ªïi k√≠ch th∆∞·ªõc grid
    makeGridResizable();
});
