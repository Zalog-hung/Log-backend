// =================================================================
// === KHAI B√ÅO BI·∫æN TO√ÄN C·ª§C (GLOBAL VARIABLES) ===
// =================================================================
let khachHangList = [];


// =================================================================
// === C√ÅC H√ÄM T·∫¢I D·ªÆ LI·ªÜU (DATA FETCHING FUNCTIONS) ===
// =================================================================

/**
 * T·∫£i danh s√°ch kh√°ch h√†ng t·ª´ Google Sheet v√† l∆∞u v√†o bi·∫øn to√†n c·ª•c.
 */
async function loadKhachHangList() {
    try {
        const res = await fetch("https://script.google.com/macros/s/AKfycbw6DcLseuze9340EK396D1JE9Of1qk0eyzQGd1Te19p0gnn-dwwioq1zS_1Iwe1WNY/exec");
        khachHangList = await res.json();
        console.log("‚úÖ T·∫£i danh s√°ch kh√°ch h√†ng th√†nh c√¥ng:", khachHangList.length, "kh√°ch h√†ng");
    } catch (err) {
        console.error("‚ùå L·ªói kh√¥ng t·∫£i ƒë∆∞·ª£c danh s√°ch kh√°ch h√†ng:", err);
    }
}

/**
 * T·∫£i d·ªØ li·ªáu log t·ª´ Google Sheet v√† hi·ªÉn th·ªã trong m·ªôt b·∫£ng c√≥ th·ªÉ ch·ªânh s·ª≠a.
 */
async function fetchAndShowLog() {
    const logArea = document.getElementById('logArea');
    if (!logArea) return;
    logArea.innerHTML = '[LOG] H·ªá th·ªëng s·∫µn s√†ng.<br>‚è≥ ƒêang t·∫£i log...';

    try {
        const response = await fetch('https://script.google.com/macros/s/AKfycbwhGc1NHndpO2IYfEhFDFAiLHyTi1LqlWFSnfqtSxWPEQ5bCw7r4idZ23qvb83PitB0Dw/exec');
        const data = await response.json();

        if (!data || data.length <= 1) {
            logArea.innerHTML += '<br>‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu log.';
            return;
        }

        logArea.innerHTML += `<br>üìã T√¨m th·∫•y ${data.length - 1} d√≤ng log c√≥ d·ªØ li·ªáu:`;

        const wrapper = document.createElement('div');
        wrapper.style.cssText = 'overflow: auto; max-height: 400px; max-width: 100%; border: 1px solid #ccc; background: #fff;';

        const table = document.createElement('table');
        table.style.cssText = 'border-collapse: collapse; font-size: 14px; min-width: max-content; background: #fff;';

        const styleCell = (cell, isHeader = false) => {
            cell.style.border = '1px solid #ccc';
            cell.style.padding = '4px 6px';
            cell.style.minWidth = '100px';
            cell.style.maxWidth = '200px';
            cell.style.whiteSpace = 'nowrap';
            cell.style.overflow = 'hidden';
            if (isHeader) {
                cell.style.cssText += 'background: #f0f0f0; font-weight: bold; position: sticky; top: 0; z-index: 1; text-align: center;';
            }
        };

        // --- TABLE HEADER ---
        const trHead = document.createElement('tr');
        const headers = (Array.isArray(data[0]) ? data[0] : Object.values(data[0])).slice(0, 26);
        for (let i = 0; i < 26; i++) {
            const th = document.createElement('th');
            th.textContent = headers[i] || '';
            styleCell(th, true);
            trHead.appendChild(th);
        }
        table.appendChild(trHead);

        // --- TABLE BODY ---
        for (let i = 1; i < data.length; i++) {
            const rawRow = data[i] || [];
            if (rawRow.slice(0, 26).every(cell => cell === '')) continue;

            const tr = document.createElement('tr');
            for (let col = 0; col < 26; col++) {
                const td = document.createElement('td');
                td.textContent = rawRow[col] || '';
                td.contentEditable = true;
                td.dataset.row = i;
                td.dataset.col = col;
                td.addEventListener('blur', () => {
                    const newValue = td.textContent.trim();
                    console.log(`üìù S·ª≠a log: d√≤ng ${i + 1}, c·ªôt ${String.fromCharCode(65 + col)} ‚Üí "${newValue}"`);
                    // TODO: G·ª≠i d·ªØ li·ªáu ƒë√£ s·ª≠a l√™n server
                });
                styleCell(td);
                tr.appendChild(td);
            }
            table.appendChild(tr);
        }

        wrapper.appendChild(table);
        logArea.appendChild(wrapper);
    } catch (err) {
        logArea.innerHTML += '<br>‚ùå L·ªói khi t·∫£i log.';
        console.error(err);
    }
}

// =================================================================
// === C√ÅC H√ÄM T∆Ø∆†NG T√ÅC GIAO DI·ªÜN (UI INTERACTION) ===
// =================================================================

/**
 * Th√™m c√°c tay c·∫ßm ƒë·ªÉ thay ƒë·ªïi k√≠ch th∆∞·ªõc c√°c √¥ trong grid.
 */
function makeGridResizable() {
    // ... (To√†n b·ªô logic c·ªßa h√†m makeGridResizable gi·ªØ nguy√™n nh∆∞ c≈©)
    const grid = document.querySelector(".excel-grid");
    if (!grid) return;
    const cells = Array.from(grid.children);
    if (cells.length === 0) return;
    const colCount = getComputedStyle(grid).gridTemplateColumns.split(" ").length;
    cells.forEach(cell => {
        if (!cell.querySelector('.resizer-v')) {
            const resizerV = document.createElement("div");
            resizerV.className = "resizer-v";
            cell.appendChild(resizerV);
            resizerV.addEventListener("mousedown", initResizeV);
        }
        if (!cell.querySelector('.resizer-h')) {
            const resizerH = document.createElement("div");
            resizerH.className = "resizer-h";
            cell.appendChild(resizerH);
            resizerH.addEventListener("mousedown", initResizeH);
        }
    });
    let startX, startY, activeCell, colIndex, rowIndex, colWidths, rowHeights;

    function initResizeV(e) {
        activeCell = e.target.parentElement;
        colIndex = Array.from(activeCell.parentElement.children).indexOf(activeCell) % colCount;
        startX = e.clientX;
        colWidths = getComputedStyle(grid).gridTemplateColumns.split(" ").map(w => parseInt(w, 10));
        document.documentElement.addEventListener("mousemove", doResizeV);
        document.documentElement.addEventListener("mouseup", stopResize);
    }

    function doResizeV(e) {
        const diffX = e.clientX - startX;
        const newWidth = colWidths[colIndex] + diffX;
        if (newWidth > 30) {
            grid.style.gridTemplateColumns = colWidths.map((w, i) => i === colIndex ? `${newWidth}px` : `${w}px`).join(" ");
        }
    }

    function initResizeH(e) {
        activeCell = e.target.parentElement;
        const cellIndex = Array.from(grid.children).indexOf(activeCell);
        rowIndex = Math.floor(cellIndex / colCount);
        startY = e.clientY;
        rowHeights = getComputedStyle(grid).gridTemplateRows.split(" ").map(h => parseInt(h, 10));
        document.documentElement.addEventListener("mousemove", doResizeH);
        document.documentElement.addEventListener("mouseup", stopResize);
    }

    function doResizeH(e) {
        const diffY = e.clientY - startY;
        const newHeight = (rowHeights[rowIndex] || 36) + diffY;
        if (newHeight > 30) {
            grid.style.gridTemplateRows = rowHeights.map((h, i) => i === rowIndex ? `${newHeight}px` : `${h}px`).join(" ");
        }
    }

    function stopResize() {
        document.documentElement.removeEventListener("mousemove", doResizeV);
        document.documentElement.removeEventListener("mousemove", doResizeH);
        document.documentElement.removeEventListener("mouseup", stopResize);
    }
}

/**
 * Th√™m m·ªôt d√≤ng m·ªõi v√†o grid nh·∫≠p li·ªáu.
 */
function addNewRow() {
    const grid = document.querySelector('.excel-grid');
    const inputList = [];

    const existingInputs = Array.from(grid.querySelectorAll('input'));
    const colCount = 6;
    const lastRowStart = existingInputs.length - colCount;
    const lastRow = existingInputs.slice(lastRowStart, lastRowStart + colCount);

    for (let i = 0; i < colCount; i++) {
        const cell = document.createElement('div');
        cell.className = 'excel-cell';

        const input = document.createElement('input');
        input.type = 'text';

        // ‚úÖ G√°n datalist cho √¥ "Ca" (index 4)
        if (i === 4) {
            input.setAttribute('list', 'ca-list');
        }

        // ‚úÖ N·∫øu l√† √¥ "Ng√†y" ho·∫∑c "Ca", sao ch√©p gi√° tr·ªã t·ª´ d√≤ng tr∆∞·ªõc n·∫øu c√≥
        if ((i === 1 || i === 4) && lastRow[i] && lastRow[i].value) {
            input.value = lastRow[i].value;
        }

        cell.appendChild(input);
        grid.appendChild(cell);
        inputList.push(input);
    }
    

    // √î h√†nh ƒë·ªông
    const actionCell = document.createElement('div');
    actionCell.className = 'excel-cell action-cell';
    actionCell.innerHTML = `
        <button onclick="editRow(this)">‚úèÔ∏è</button>
        <button onclick="deleteRow(this)">üóëÔ∏è</button>
 
    `;
    grid.appendChild(actionCell);

    makeGridResizable(); // C·∫≠p nh·∫≠t l·∫°i resize

    return inputList;
}




// C√°c h√†m cho n√∫t b·∫•m v√† tab
function switchTab(tab) { /* Gi·ªØ nguy√™n logic */ }
function editRow(button) { alert('Ch·ª©c nƒÉng S·ª≠a'); }
function deleteRow(button) { alert('Ch·ª©c nƒÉng X√≥a'); }
//function splitRow(button) { alert('Ch·ª©c nƒÉng T√°ch'); }


// =================================================================
// === C√ÅC H√ÄM X·ª¨ L√ù NH·∫¨P LI·ªÜU (INPUT HANDLING) ===
// =================================================================

/**
 * X·ª≠ l√Ω t·ª± ƒë·ªông ƒë·ªãnh d·∫°ng cho √¥ "Ng√†y".
 */
function handleNgay(input) {
    // ... (To√†n b·ªô logic c·ªßa h√†m handleNgay gi·ªØ nguy√™n nh∆∞ c≈©)
    const val = input.value.trim();
    if (!val) {
        // C√≥ th·ªÉ th√™m logic m·ªü popup ch·ªçn ng√†y n·∫øu mu·ªën
        return;
    }
    const dmPattern = /^(\d{1,2})\/(\d{1,2})$/;
    if (dmPattern.test(val)) {
        const [, d, m] = val.match(dmPattern);
        input.value = `${d.padStart(2, '0')}/${m.padStart(2, '0')}/${new Date().getFullYear()}`;
    }
}

/**
 * X·ª≠ l√Ω g·ª£i √Ω v√† t·ª± ƒë·ªông ho√†n th√†nh cho √¥ "Kh√°ch h√†ng".
 */
function handleKhachHang(input) {
    let suggestionBox = null;

    const createSuggestionBox = () => {
        document.querySelectorAll('.suggestions-container').forEach(el => el.remove());
        const box = document.createElement('div');
        box.className = 'suggestions-container';
        box.style.cssText = 'position: absolute; z-index: 9999; border: 1px solid #ccc; background: #fff; max-height: 150px; overflow-y: auto;';
        document.body.appendChild(box);
        return box;
    };

    const showSuggestionBox = (filtered) => {
        if (!suggestionBox || !document.body.contains(suggestionBox)) {
            suggestionBox = createSuggestionBox();
        }

        const rect = input.getBoundingClientRect();
        suggestionBox.style.left = `${rect.left + window.scrollX}px`;
        suggestionBox.style.top = `${rect.bottom + window.scrollY}px`;
        suggestionBox.style.width = `${rect.width}px`;
        suggestionBox.innerHTML = '';

        if (!filtered.length) {
            suggestionBox.style.display = 'none';
            return;
        }

        filtered.forEach(name => {
            const item = document.createElement('div');
            item.textContent = name;
            item.style.cssText = 'padding: 4px 8px; cursor: pointer;';
            item.addEventListener('mousedown', (e) => {
                e.preventDefault();

                let currentVal = input.value;
                const lastPlusIndex = currentVal.lastIndexOf('+');

                if (lastPlusIndex === -1) {
                    // Kh√¥ng c√≥ d·∫•u +, thay to√†n b·ªô gi√° tr·ªã
                    input.value = name;
                } else {
                    // Thay ph·∫ßn sau d·∫•u + cu·ªëi c√πng
                    const beforePlus = currentVal.slice(0, lastPlusIndex + 1);
                    // Gi·ªØ kho·∫£ng c√°ch sau d·∫•u +, n·∫øu b·∫°n mu·ªën b·ªè th√¨ x√≥a ' ' n√†y
                    input.value = beforePlus + ' ' + name;
                }

                suggestionBox.style.display = 'none';
                input.focus();

                // ƒê·∫∑t con tr·ªè ·ªü cu·ªëi ƒë·ªÉ ti·∫øp t·ª•c nh·∫≠p
                setTimeout(() => {
                    input.selectionStart = input.selectionEnd = input.value.length;
                }, 0);
            });
            suggestionBox.appendChild(item);
        });
        suggestionBox.style.display = 'block';
    };

    const updateSuggestions = () => {
        let val = input.value;
        const lastPlusIndex = val.lastIndexOf('+');
        let searchText = '';

        if (lastPlusIndex === -1) {
            searchText = val.trim().toLowerCase();
        } else {
            searchText = val.slice(lastPlusIndex + 1).trim().toLowerCase();
        }

        if (!searchText) {
            if (suggestionBox) suggestionBox.style.display = 'none';
            return;
        }

        const filtered = khachHangList.filter(kh => kh.toLowerCase().includes(searchText));
        showSuggestionBox(filtered);
    };

    input.addEventListener('input', updateSuggestions);

    input.addEventListener('blur', () => {
        setTimeout(() => {
            if (suggestionBox) suggestionBox.style.display = 'none';
        }, 150);
    });
}

/**
 * X·ª≠ l√Ω t·ª± ƒë·ªông cho √¥ "S·ªë l∆∞·ª£ng".
 */
function handleSoLuong(input) {
    let val = input.value;

    // T√°ch theo d·∫•u c·ªông, gi·ªØ d·∫•u c√°ch
    let parts = val.split('+').map(part => part.trim());

    const formatPart = (part) => {
        // Ki·ªÉm tra xem c√≥ ƒëu√¥i 'T' kh√¥ng
        let hasT = false;
        if (part.toUpperCase().endsWith('T')) {
            hasT = true;
            part = part.slice(0, -1).trim();
        }

        // Ki·ªÉm tra xem part c√≥ ph·∫£i l√† s·ªë h·ª£p l·ªá
        if (part === '') return ''; // ph·∫ßn r·ªóng th√¨ b·ªè
        if (!isNaN(part)) {
            // N·∫øu l√† s·ªë h·ª£p l·ªá, format s·ªë ki·ªÉu VN, gi·ªØ 1 ho·∫∑c 2 ch·ªØ s·ªë th·∫≠p ph√¢n n·∫øu c√≥
            let num = parseFloat(part);
            // B·∫°n c√≥ th·ªÉ t√πy ch·ªânh decimalPlaces ·ªü ƒë√¢y
            const decimalPlaces = 2;
            let formatted = num.toLocaleString('vi-VN', {
                minimumFractionDigits: 0,
                maximumFractionDigits: decimalPlaces,
            });
            return hasT ? formatted + 'T' : formatted;
        }
        // N·∫øu kh√¥ng h·ª£p l·ªá th√¨ tr·∫£ v·ªÅ nguy√™n g·ªëc (ho·∫∑c b·∫°n c√≥ th·ªÉ x√≥a)
        return part + (hasT ? 'T' : '');
    };

    let formattedParts = parts.map(formatPart).filter(p => p !== '');

    // N·ªëi l·∫°i v·ªõi d·∫•u ' + '
    input.value = formattedParts.join(' + ');
}

/**
 * ƒêi·ªÅu h∆∞·ªõng x·ª≠ l√Ω d·ª±a tr√™n header c·ªßa c·ªôt.
 */
function handleInputByIndex(index, input) {
    const headerCells = Array.from(document.querySelectorAll('.header-cell'));
    const header = headerCells[index]?.textContent?.trim().toLowerCase();

    switch (header) {
        case 'ng√†y':
            handleNgay(input);
            break;
        case 'kh√°ch h√†ng':
            // G·ª£i √Ω ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω b·∫±ng 'input', ƒë√¢y c√≥ th·ªÉ l√† n∆°i x·ª≠ l√Ω khi Enter
            break;
        case 's·ªë l∆∞·ª£ng':
            handleSoLuong(input);
            break;
        default:
            break;
    }
}


/**
 * G·∫Øn s·ª± ki·ªán ƒëi·ªÅu h∆∞·ªõng b·∫±ng ph√≠m Enter cho m·ªôt nh√≥m c√°c √¥ input.
 */
function attachEnterNavigation(inputs) {
    if (!inputs || inputs.length === 0) return;

    inputs.forEach((input, index) => {
        // G·∫Øn x·ª≠ l√Ω g·ª£i √Ω cho √¥ kh√°ch h√†ng (√¥ th·ª© 3, index = 2)
        if (index === 2) {
            handleKhachHang(input);
        }

        input.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                handleInputByIndex(index, input);

                if (index < inputs.length - 1) {
                    inputs[index + 1].focus();
                } else {
                    const newInputs = addNewRow();
                    attachEnterNavigation(newInputs);
                    newInputs[0].focus();
                }
            }
        });
    });
}

// =================================================================
// === KH·ªêI L·ªÜNH CH√çNH (MAIN EXECUTION BLOCK) ===
// =================================================================

document.addEventListener('DOMContentLoaded', () => {
    console.log("üöÄ giaodien.js ƒë√£ s·∫µn s√†ng!");

    // 1. T·∫£i c√°c d·ªØ li·ªáu c·∫ßn thi·∫øt
    loadKhachHangList();
    fetchAndShowLog();

    const grid = document.querySelector(".excel-grid");
    if (!grid) {
        console.error("Kh√¥ng t√¨m th·∫•y ph·∫ßn t·ª≠ .excel-grid!");
        return;
    }

    // 2. G·∫Øn s·ª± ki·ªán cho n√∫t "Th√™m d√≤ng"
    const addRowButton = document.getElementById('addRowBtn');
    if (addRowButton) {
        addRowButton.addEventListener('click', () => {
            const newInputs = addNewRow();
            attachEnterNavigation(newInputs);
            newInputs[0].focus();
        });
    }

    // 3. G·∫Øn s·ª± ki·ªán Enter cho c√°c d√≤ng ƒë√£ c√≥ s·∫µn trong HTML
    const existingInputs = Array.from(grid.querySelectorAll('input'));
    const colCount = 6;
    for (let i = 0; i < existingInputs.length; i += colCount) {
        attachEnterNavigation(existingInputs.slice(i, i + colCount));
    }

    // 4. Kh·ªüi ch·∫°y ch·ª©c nƒÉng thay ƒë·ªïi k√≠ch th∆∞·ªõc grid
    makeGridResizable();
});
const logButton = document.getElementById('logBtn');
if (logButton) {
    logButton.addEventListener('click', () => {
        const grid = document.querySelector('.excel-grid');
        const inputs = Array.from(grid.querySelectorAll('input'));
        const rows = [];
        const colCount = 6;

        for (let i = 0; i < inputs.length; i += colCount) {
            const row = inputs.slice(i, i + colCount).map(input => input.value.trim());
            const isEmpty = row.every(val => val === '');
            if (!isEmpty) {
                rows.push(row);
            }
        }

        if (rows.length === 0) {
            alert('‚ö†Ô∏è Kh√¥ng c√≥ d√≤ng d·ªØ li·ªáu ƒë·ªÉ ghi log.');
            return;
        }

        fetch('https://za-log-proxy-4pkb9hu3p-hung-za.vercel.app/api/proxy', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ rows })
})
        .then(res => res.json())
        .then(data => {
            if (data.status === 'success') {
                alert(`‚úÖ ${data.message || 'Ghi log th√†nh c√¥ng!'}`);
                console.log('[Ghi Log]', rows);
            } else {
                throw new Error(data.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh t·ª´ server.');
            }
        })
        .catch(err => {
            console.error('‚ùå L·ªói khi ghi log:', err);
            alert('‚ùå L·ªói khi ghi log:\n' + err.message);
        });
    });
}
